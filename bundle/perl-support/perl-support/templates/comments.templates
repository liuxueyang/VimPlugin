== Comments.end-of-line-comment == append, nomenu ==
# <CURSOR>
== Comments.frame == map:cfr, sc:f  ==
#-------------------------------------------------------------------------------
#  <CURSOR>
#-------------------------------------------------------------------------------
== Comments.function == map:cfu, sc:f  ==
#===  FUNCTION  ================================================================
#         NAME: |?FUNCTION_NAME|
#      PURPOSE: <CURSOR>
#   PARAMETERS: ????
#      RETURNS: ????
#  DESCRIPTION: ????
#       THROWS: no exceptions
#     COMMENTS: none
#     SEE ALSO: n/a
#===============================================================================
== Comments.method == map:cme, sc:m  ==
#===  CLASS METHOD  ============================================================
#        CLASS: |?CLASSNAME|
#       METHOD: |?METHODNAME|
#   PARAMETERS: ????
#      RETURNS: ????
#  DESCRIPTION: <CURSOR>
#       THROWS: no exceptions
#     COMMENTS: none
#     SEE ALSO: n/a
#===============================================================================
== Comments.file description pl == map:chpl, sc:d, start, noindent ==
#!/usr/bin/env perl 
#===============================================================================
#
#         FILE: |FILENAME|
#
#  DESCRIPTION: <CURSOR>
#
#        FILES: ---
#         BUGS: ---
#        NOTES: ---
#       AUTHOR: |AUTHOR| (|AUTHORREF|), |EMAIL|
# ORGANIZATION: |ORGANIZATION|
#      VERSION: 1.0
#      CREATED: |DATE| |TIME|
#     REVISION: ---
#===============================================================================

use strict;
use warnings;
use utf8;
#use 5.020;
$\ = $/;

<+PART+>

#===  FUNCTION  ================================================================
#         NAME: str_array_in_array_of_array
#      PURPOSE: find if an array is equal to one of a array of arrays
#   PARAMETERS: two array reference
#      RETURNS: return 1 if find an equal array, 0 otherwise
#  DESCRIPTION: all arrays are array of strings
#       THROWS: no exceptions
#     COMMENTS: none
#     SEE ALSO: n/a
#===============================================================================
sub str_array_in_array_of_array {
    my ($small_ar, $ar_ar) = @_;
    my $mark = 0;
    for (@{$ar_ar}) {
        $mark = 1;
        unless (str_array_cmp($small_ar, $_)) {
            $mark = 0;
            next;
        }
        last if $mark;
    }
    $mark;
}

#===  FUNCTION  ================================================================
#         NAME: num_array_in_array_of_array
#      PURPOSE: find if an array is equal to one of a array of arrays
#   PARAMETERS: two array reference
#      RETURNS: return 1 if find an equal array, 0 otherwise
#  DESCRIPTION: all arrays are array of numbers
#       THROWS: no exceptions
#     COMMENTS: none
#     SEE ALSO: n/a
#===============================================================================
sub num_array_in_array_of_array {
    my ($small_ar, $ar_ar) = @_;
    my $mark = 0;
    for (@{$ar_ar}) {
        $mark = 1;
        unless (num_array_cmp($small_ar, $_)) {
            $mark = 0;
            next;
        }
        last if $mark;
    }
    $mark;
}

#===  FUNCTION  ================================================================
#         NAME: str_array_cmp
#      PURPOSE: compare two array of strings
#   PARAMETERS: two array reference
#      RETURNS: return 1 if two array are equal, 0 otherwise
#  DESCRIPTION: ????
#       THROWS: no exceptions
#     COMMENTS: none
#     SEE ALSO: n/a
#===============================================================================
sub str_array_cmp {
    return 0 if @{$_[0]} != @{$_[1]};
    my $len = @{$_[0]};
    for (0..$len-1) { return 0 unless ($_[0][$_] eq $_[1][$_]); }
    return 1;
} ## --- end sub str_array_cmp

#===  FUNCTION  ================================================================
#         NAME: num_array_cmp
#      PURPOSE: compare two array of numbers
#   PARAMETERS: two array reference
#      RETURNS: return 1 if two array are equal, 0 otherwise
#  DESCRIPTION: ????
#       THROWS: no exceptions
#     COMMENTS: none
#     SEE ALSO: n/a
#===============================================================================
sub num_array_cmp {
    return 0 if @{$_[0]} != @{$_[1]};
    my $len = @{$_[0]};
    for (0..$len-1) { return 0 unless ($_[0][$_] == $_[1][$_]); }
    return 1;
} ## --- end sub num_array_cmp

exit 0;

== Comments.file description pm == map:chpm, sc:d, start, noindent ==
#
#===============================================================================
#
#         FILE: |FILENAME|
#
#  DESCRIPTION: <CURSOR>
#
#        FILES: ---
#         BUGS: ---
#        NOTES: ---
#       AUTHOR: |AUTHOR| (|AUTHORREF|), |EMAIL|
# ORGANIZATION: |ORGANIZATION|
#      VERSION: 1.0
#      CREATED: |DATE| |TIME|
#     REVISION: ---
#===============================================================================

use strict;
use warnings;
 
== Comments.file description t == map:cht, sc:d, start, noindent ==
#
#===============================================================================
#
#         FILE: |FILENAME|
#
#  DESCRIPTION: <CURSOR>
#
#        FILES: ---
#         BUGS: ---
#        NOTES: ---
#       AUTHOR: |AUTHOR| (|AUTHORREF|), |EMAIL|
# ORGANIZATION: |ORGANIZATION|
#      VERSION: 1.0
#      CREATED: |DATE| |TIME|
#     REVISION: ---
#===============================================================================

use strict;
use warnings;

use Test::More tests => 1;                      # last test to print


== Comments.file description pod == map:chpo, sc:d, start ==
#
#===============================================================================
#
#         FILE: |FILENAME|
#
#  DESCRIPTION: <CURSOR>
#
#       AUTHOR: |AUTHOR| (|AUTHORREF|), <|EMAIL|>
# ORGANIZATION: |ORGANIZATION|
#      CREATED: |DATE|
#     REVISION: ---
#===============================================================================


== Comments.date == insert, map:cd, sc:d ==
|DATE|<CURSOR>
== Comments.date+time == insert, map:ct, sc:t ==
|DATE| |TIME|<CURSOR>
== ENDTEMPLATE ==

== LIST: comments_keywords == hash ==
  'BUG'         : ':BUG:|DATE| |TIME|:|AUTHORREF|:',
  'REMARK'      : ':REMARK:|DATE| |TIME|:|AUTHORREF|:',
  'TODO'        : ':TODO:|DATE| |TIME|:|AUTHORREF|:',
  'WARNING'     : ':WARNING:|DATE| |TIME|:|AUTHORREF|:',
  'WORKAROUND'  : ':WORKAROUND:|DATE| |TIME|:|AUTHORREF|:',
  'new keyword' : ':{+NEW_KEYWORD+}:|DATE| |TIME|:|AUTHORREF|:',
== LIST: comments_macros == hash ==
  'AUTHOR'       : '|AUTHOR|',
  'AUTHORREF'    : '|AUTHORREF|',
  'COMPANY'      : '|COMPANY|',
  'COPYRIGHT'    : '|COPYRIGHT|',
  'EMAIL'        : '|EMAIL|',
  'ORGANIZATION' : '|ORGANIZATION|',
== ENDLIST ==

== Comments.keyword comments == expandmenu, append, map:ck, sc:k ==
|PickList( 'keyword comment', 'comments_keywords' )|
 # |PICK| <CURSOR>
== Comments.macros == expandmenu, insert, map:cma, sc:m ==
|PickList( 'macro', 'comments_macros' )|
|PICK|<CURSOR>
== ENDTEMPLATE ==
